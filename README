# 📊 JSON to Excel Converter

A simple, powerful, and user-friendly web application that converts JSON data into Excel spreadsheet format. No server required - everything runs directly in your browser!

![Excel Icon](https://img.shields.io/badge/Excel-217346?style=for-the-badge&logo=microsoft-excel&logoColor=white)
![JavaScript](https://img.shields.io/badge/JavaScript-F7DF1E?style=for-the-badge&logo=javascript&logoColor=black)
![HTML5](https://img.shields.io/badge/HTML5-E34F26?style=for-the-badge&logo=html5&logoColor=white)

## ✨ Features

- **🚀 100% Client-Side**: No server uploads, all processing happens in your browser
- **📝 Flexible JSON Input**: Accepts both JavaScript object notation and standard JSON format
- **🔧 Smart Auto-Correction**: Automatically fixes common JSON formatting issues
- **📅 Date Handling**: Intelligently wraps unquoted date values
- **🎯 Error Detection**: Shows exactly which object/ID has errors for easy debugging
- **🎨 Excel-Themed UI**: Beautiful spreadsheet-inspired design with grid overlay
- **⚡ Fast & Lightweight**: Instant conversion with no dependencies except SheetJS
- **🔒 Privacy First**: Your data never leaves your browser

## 🎯 Use Cases

- Export database query results to Excel
- Convert API responses to spreadsheets
- Transform JSON logs into analyzable Excel files
- Batch convert multiple JSON datasets
- Quick data visualization and sharing

## 🚀 Getting Started

### Prerequisites

- Any modern web browser (Chrome, Firefox, Safari, Edge)
- No installation required!

### Usage

1. **Open the HTML file** in your web browser
2. **Enter a filename** in the "Excel File Title" field (optional, defaults to "data")
3. **Paste your JSON data** in the textarea
4. **Click "Convert & Download Excel"**
5. Your Excel file will be downloaded automatically!

## 📋 JSON Format Examples

### Standard JSON Format
```json
[
  {
    "id": 1,
    "name": "John Doe",
    "email": "john@example.com",
    "age": 30
  },
  {
    "id": 2,
    "name": "Jane Smith",
    "email": "jane@example.com",
    "age": 25
  }
]
```

### JavaScript Object Notation (Also Supported!)
```javascript
[
  {
    id: 1,
    name: 'John Doe',
    email: 'john@example.com',
    age: 30
  },
  {
    id: 2,
    name: 'Jane Smith',
    email: 'jane@example.com',
    age: 25
  }
]
```

### Date Values (Automatically Handled!)
```javascript
[
  {
    id: 686765,
    transaction_reference: 'TXN123456',
    submission_date: 2025-09-16T11:45:45.056Z,  // Will be auto-quoted
    donation_date: 2025-09-17T00:00:00.000Z,     // Will be auto-quoted
    amount: 1000
  }
]
```

## 🛠️ Smart Features

### Auto-Correction
The converter automatically handles:
- ✅ Unquoted property names → Adds quotes
- ✅ Single quotes → Converts to double quotes
- ✅ Unquoted date values → Wraps in quotes
- ✅ Trailing semicolons → Removes them
- ✅ Extra whitespace → Trims it

### Error Handling
When errors occur, you'll see:
- 🔍 Exact error message
- 🆔 Last detected ID before error
- 🔢 Approximate object number
- 📍 Line and column position

## 🎨 Technical Details

### Built With
- **HTML5** - Structure
- **CSS3** - Excel-inspired styling with grid overlay
- **Vanilla JavaScript** - Logic and data processing
- **SheetJS (xlsx)** - Excel file generation

### Browser Compatibility
- ✅ Chrome 90+
- ✅ Firefox 88+
- ✅ Safari 14+
- ✅ Edge 90+

## 📊 Output Format

The generated Excel file includes:
- **Column headers** extracted from JSON object keys
- **Data rows** for each object in the array
- **Proper data types** (numbers, strings, dates)
- **Single worksheet** named "Sheet1"
- **XLSX format** compatible with Microsoft Excel, Google Sheets, LibreOffice

## 🔒 Privacy & Security

- **No data transmission**: All processing happens locally in your browser
- **No server storage**: Files are generated in memory and downloaded directly
- **No tracking**: No analytics or data collection
- **Secure**: Your sensitive data never leaves your computer

## ⚠️ Common Issues & Solutions

### Issue: "Expected property name or '}'"
**Solution**: Make sure your JSON starts with `[` and ends with `]`. Property names need quotes in standard JSON.

### Issue: "Unexpected non-whitespace character"
**Solution**: Remove any trailing semicolons (`;`) after the closing `]` or check for missing commas between objects.

### Issue: "JSON data must be an array of objects"
**Solution**: Ensure your data is wrapped in square brackets `[...]` and contains objects `{...}`.

### Issue: Can't find downloaded file
**Solution**: Check your browser's Downloads folder. The file is named according to your "Excel File Title" input.

## 💡 Tips

1. **Large datasets**: The tool can handle thousands of objects, but very large files (>10MB) may take a moment to process
2. **Complex nested objects**: For best results, use flat object structures. Nested objects will be converted to `[object Object]`
3. **Date formatting**: Dates are preserved as strings in Excel. You can format them in Excel after importing
4. **Special characters**: All special characters in strings are preserved correctly

## 🤝 Contributing

Found a bug or have a feature request? Contributions are welcome!

## 📄 License

This project is open source and available under the MIT License.

## 🙏 Acknowledgments

- [SheetJS](https://sheetjs.com/) for the excellent Excel library
- Inspired by the need for quick JSON-to-Excel conversions without cloud services

## 📧 Support

If you encounter any issues or have questions, please check the Common Issues section above or create an issue in the repository.

---

**Made with ❤️ for developers who love Excel and JSON**

🌟 Star this project if you find it useful!